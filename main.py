# importing libraries to be used
from telebot import types
import time
import cv2
from Settings import CONST_bot_token as bot

# setting the cascades used for recognition
face_cascade_db = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")
eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_eye.xml")

# face recognition algorithm function
def raspoznovanie(image_path):
    img = cv2.imread(image_path)
    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    faces = face_cascade_db.detectMultiScale(img_gray, 1.1, 19)
    for (x, y, w, h) in faces:
        cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)
        img_gray_face = img_gray[y:y + h, x:x + w]
        eyes = eye_cascade.detectMultiScale(img_gray_face, 1.1, 19)
        for (ex, ey, ew, eh) in eyes:
            cv2.rectangle(img, (x + ex, y + ey), (x + ex + ew, y + ey + eh), (255, 0, 0), 2)
    new_path = image_path + '_' + '.jpg'
    cv2.imwrite(new_path, img)
    return new_path

# temporary folder cleanup function
# def clear_content(chat_id):
#      try:
#          for img in images[chat_id]:
#              os.remove(img)
#      except Exception as e:
#          time.sleep(3)
#          clear_content(chat_id)
#      images[chat_id] = []

# creating the new associative array
images = dict()

# description of the start of the bot
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ö–∞–∫ –¥–µ–ª–∞?")
    item2 = types.KeyboardButton("–ü–µ—Ä–µ–π–¥–µ–º –∫ –¥–µ–ª—É?")
    markup.add(item1, item2)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ö–∞–∫ –¥–µ–ª–∞?")
    item2 = types.KeyboardButton("–ü–µ—Ä–µ–π–¥–µ–º –∫ –¥–µ–ª—É?")
    markup.add(item1, item2)

    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞—Ç—å –ª–∏—Ü–∞ –∏ –æ–±—â–∞—Ç—å—Å—è.".format(
                         message.from_user, bot.get_me()),
                     parse_mode='html', reply_markup=markup)


# description of the main part of my bot
@bot.message_handler(content_types=['text'])
def lalala(message):
    if message.chat.type == 'private':
        if message.text in ('–ü–µ—Ä–µ–π–¥–µ–º –∫ –¥–µ–ª—É?', '/go'):
            # bot.send_message(message.chat.id, "–≠—Ç–∞ —á–∞—Å—Ç—å –±–æ—Ç–∞ –ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç —Å –≤–∞–º–∏ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å!\n–ü—Ä–æ—Å—Ç–∏—Ç–µ –µ—ë, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–Ω–∞ –Ω–µ —Ö–æ—Ç–µ–ª–∞ –≤–∞—Å –æ–±–∏–¥–µ—Ç—å.\n–í—ã —Å–∞–º—ã–π –ª—É—á—à–∏–π —á–µ–ª–æ–≤–µ–∫!")
            # bot.send_photo(message.chat.id, open("sorry.jpg", 'rb'))
            bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
            bot.register_next_step_handler(message, handle_docs_photo)
        elif message.text == '–ö–∞–∫ –¥–µ–ª–∞?':
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='good')
            item2 = types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data='bad')
            markup.add(item1, item2)
            bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Å–∞–º –∫–∞–∫?', reply_markup=markup)
        else:
            bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢, –ù–∞–ø–∏—à–∏ /go')

# upload photos to the server
@bot.message_handler(content_types=['photo'])
def handle_docs_photo(message):
    try:
        print(message.photo[:-1])
        images[str(message.chat.id)] = []
        try:
            file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            src = 'tmp/' + file_info.file_path
            with open(src, 'wb') as new_file:
                new_file.write(downloaded_file)
                bot.reply_to(message, "–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
                bot.send_message(message.chat.id, "–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!")
                bot.send_message(message.chat.id, "–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...")
                images[str(message.chat.id)].append(src)
        except Exception as e:
                bot.reply_to(message, e)
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –≤–∏–¥–∏–º–æ –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –º–Ω–µ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ")
        bot.send_message(message.chat.id, "–ß–µ–º –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ –º–µ–Ω—è –∑–∞–ø—É—Ç–∞–ª–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")

    time.sleep(3)

    print('img: ', images)
    reply_img = ''
    if (len(images[str(message.chat.id)]) == 1):
        reply_img = raspoznovanie(images[str(message.chat.id)][0])
        images[str(message.chat.id)].append(reply_img)
        bot.send_photo(message.chat.id, open(reply_img, 'rb'))
        #clear_content(str(message.chat.id))


# description of the working part of the bot
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'good':
                bot.send_message(call.message.chat.id, '–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–µ–Ω—å–∫–æ üòä')
            elif call.data == 'bad':
                bot.send_message(call.message.chat.id, '–ë—ã–≤–∞–µ—Ç üò¢')

            # remove inline buttons
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üòä –ö–∞–∫ –¥–µ–ª–∞?",
                                  reply_markup=None)

            # show alert
            bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
                                      text="üò¢–í–´ –°–ê–ú–´–ô –õ–£–ß–®–ò–ô –ß–ï–õ–û–í–ï–ö –ù–ê –ë–ï–õ–û–ú –°–í–ï–¢–ï!!!üò¢")

    except Exception as e:
        print(repr(e))


bot.infinity_polling()
